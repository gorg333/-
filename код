#include <iostream>
#include <fstream>  
#include <stdlib.h>
#include <string>
using namespace std;
// Вывод системы уравнений
void sysout(double** a, double* y, int n) //вывод матрицы
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout << a[i][j] << "*x" << j;
            if (j < n-1 )
                cout << " + ";
        }
        cout << " = " << y[i] << endl;
    }
    return;
}
double* Gauss(double** p, double* y, int n)// реализация метода Гаусса
{
    double* x, max;
    int k, index;
    const double eps = 0.00001;  
    x = new double[n];
    k = 0;
    while (k < n)
    {
        // Поиск строки с максимальным a[i][k]
        max = abs(p[k][k]);
        index = k;
        for (int i = k + 1; i < n; i++)
        {
            if (abs(p[i][k]) > max)
            {
                max = abs(p[i][k]);
                index = i;
            }
        }
        // Перестановка строк
        if (max < eps)
        {
            // нет ненулевых диагональных элементов
            cout << "Неправильный вывод из-за нулевого столбца ";
            cout << index << " матрицы a" << endl;
            return 0;
        }
        for (int j = 0; j < n; j++) //сортировка бульбашкой 
        {
            double temp = p[k][j];
            p[k][j] = p[index][j];
            p[index][j] = temp;
        }
        double temp = y[k];
        y[k] = y[index];
        y[index] = temp;
        // Нормализация уравнений
        for (int i = k; i < n; i++)
        {
            double temp = p[i][k];
            if (abs(temp) < eps)  // для нулевого коэффициента
                continue; // пропустить
            for (int j = 0; j < n; j++)
                p[i][j] = p[i][j] / temp;
            y[i] = y[i] / temp;
            if (i == k) // уравнение не вычитать само из себя
                continue; 
            for (int j = 0; j < n; j++)
                p[i][j] = p[i][j] - p[k][j];
            y[i] = y[i] - y[k];
        }
        k++;
    }
    // обратная подстановка
    for (k = n - 1; k >= 0; k--)
    {
        x[k] = y[k];
        for (int i = 0; i < k; i++)
            y[i] = y[i] - p[i][k] * x[k];
    }
    return x;
}

int main()
{
    double** p, * y, * x;
    int n;
    //int i=0;

    system("chcp 1251");
    system("cls");

    cout << "Введите количество уравнений: ";
    cin >> n;
    //выдиление памяти
    p = new double* [n]; 
    y = new double[n];
  

        string file("File.txt"); //создать файл 
        ofstream fout; //обьект типа ofstream
        fout.open(file); //метод open
        for (int i = 0; i < n; i++)
        {
            p[i] = new double[n];
          
        }
            if (!fout.is_open()) {
                fout << "file is not opened" << endl;
            }
            else {

                fout << "File is opened" << endl;
                //  x = Gauss(p, y, n);  for (int j = 0; j < n; j++)
                for (int j = 0; j < n; j++)
                { 
                    int i = 0;
                    for (int i = 0; i < n; i++)
                    {
                        cout << "p[" << i << "][" << j << "]= ";
                        cin >> p[i][j];
                    }
                }
            
            for (int i = 0; i < n; i++)
            {
                cout << "y[" << i << "]= ";
                cin >> y[i];
            }

            sysout(p, y, n);
            x = Gauss(p, y, n); // инициализация x;
            for (int i = 0; i < n; i++) {
                cout << "x[" << i << "]=" << x[i] << endl;
            }
                ifstream fin; // чтение из файла
                fin.open(file);
                if (!fin.is_open())
                {
                    cout << " File was not found";
                }
                else
                {
                    сout << "File was opened\n";
                 }

                // освободить ресурсы
                fout.close(); 

                fin.close();
            }
} 
